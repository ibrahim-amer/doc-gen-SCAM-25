# nginx/nginx.conf

# Defines the user and group credentials used by worker processes.
# Using 'nginx' user/group is standard.
user  nginx;

# Sets the number of worker processes. 'auto' attempts to detect the optimal number based on CPU cores.
worker_processes  auto;

# Provides the configuration file context where directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections  1024;
}

# Defines directives for HTTP request processing.
http {
    # Includes mapping of file name extensions to MIME types.
    include       /etc/nginx/mime.types;
    # Default MIME type if the extension mapping doesn't find a match.
    default_type  application/octet-stream;

    # Enables or disables the use of sendfile() for more efficient file transfer.
    sendfile        on;
    # Sets a timeout during which a keep-alive client connection will stay open on the server side.
    keepalive_timeout  65;

    # ───── upstream: Define the Next.js container backend ──────────────────
    # Defines a group of servers that can be referenced by proxy_pass.
    upstream next_backend {
        # The Docker service name and internal port for the Next.js app.
        # Replace 'doc-gen_fe' if your service name in docker-compose.yml is different.
        server doc-gen_fe:3000;
    }

    # ───── HTTP server (This is what the Cloudflare Tunnel connects to) ─────
    server {
        # Listen on port 80 for incoming HTTP connections (from cloudflared).
        listen 80;

        # Set the server name (domain). While not strictly required when behind
        # the tunnel targeting the container directly, it's good practice.
        server_name surveys-doc-gen.mase-group.ca; # Use your actual domain

        # Define how to handle requests for the root and any sub-paths.
        location / {
            # Pass the request to the upstream Next.js backend.
            proxy_pass           http://next_backend;

            # --- Important Headers for Proxied Requests ---
            # Pass the original Host header from the client to the backend.
            proxy_set_header     Host $host;
            # Pass the real client IP address to the backend.
            proxy_set_header     X-Real-IP $remote_addr;
            # Append the IP address of the proxy server (Nginx) to the list of IPs
            # the request has passed through. Cloudflare might add its IPs too.
            proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;
            # *** Crucial for HTTPS behind proxy ***
            # Tell the backend application (Next.js) that the original connection
            # from the user to Cloudflare was HTTPS. This helps Next.js generate
            # correct URLs (https://...) and avoids mixed content errors.
            proxy_set_header     X-Forwarded-Proto https;
        }

        # Optional: Enable gzip compression for responses to save bandwidth.
        # It's generally safe to use gzip over the internal HTTP connection.
        gzip on;
        # Specify which MIME types to compress.
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        # Enable compression for proxied requests. 'any' means based on response headers.
        gzip_proxied any;
        # Minimum response length to trigger compression (avoids compressing tiny files).
        gzip_min_length 1000;
    }

    # ───── HTTPS server block (COMMENTED OUT / REMOVED) ────────────────────
    # This block is NOT needed for Option A where Cloudflare handles TLS
    # and the tunnel connects via HTTP. Keep it commented or remove it.
    #
    # server {
    #     listen 443 ssl http2;
    #     server_name surveys.doc-gen.mase-group.ca your_server_ip;
    #
    #     # You would need certificates mounted here if enabling HTTPS on Nginx
    #     # ssl_certificate     /etc/nginx/certs/certificate.crt;
    #     # ssl_certificate_key /etc/nginx/certs/certificate.key;
    #
    #     # Security headers & SSL/TLS settings
    #     # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     # ... other SSL settings ...
    #
    #     location / {
    #         proxy_pass           http://next_backend;
    #         proxy_set_header     Host $host;
    #         proxy_set_header     X-Real-IP $remote_addr;
    #         proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header     X-Forwarded-Proto https; # Proto is https here too
    #     }
    #
    #     # ... gzip settings ...
    # }

} # End of http block